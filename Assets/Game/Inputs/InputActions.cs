//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""CastFishingRod"",
            ""id"": ""a5537978-51dd-4572-9db1-00f5f57e00d4"",
            ""actions"": [
                {
                    ""name"": ""Casting"",
                    ""type"": ""Button"",
                    ""id"": ""57d7ea39-f1d1-4281-8cb0-2c92f985c4ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bdecd8b2-18fc-4b99-9116-411439225141"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Global"",
                    ""action"": ""Casting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Fishing"",
            ""id"": ""d45506bc-4087-476d-8d63-0d1078823d42"",
            ""actions"": [
                {
                    ""name"": ""Pull"",
                    ""type"": ""Button"",
                    ""id"": ""f990f0b8-33be-42dc-8c62-04530d8320dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74afcf55-e0a3-4548-a76e-7e6edc3d78f8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Global"",
                    ""action"": ""Pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Global"",
            ""bindingGroup"": ""Global"",
            ""devices"": []
        }
    ]
}");
        // CastFishingRod
        m_CastFishingRod = asset.FindActionMap("CastFishingRod", throwIfNotFound: true);
        m_CastFishingRod_Casting = m_CastFishingRod.FindAction("Casting", throwIfNotFound: true);
        // Fishing
        m_Fishing = asset.FindActionMap("Fishing", throwIfNotFound: true);
        m_Fishing_Pull = m_Fishing.FindAction("Pull", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CastFishingRod
    private readonly InputActionMap m_CastFishingRod;
    private List<ICastFishingRodActions> m_CastFishingRodActionsCallbackInterfaces = new List<ICastFishingRodActions>();
    private readonly InputAction m_CastFishingRod_Casting;
    public struct CastFishingRodActions
    {
        private @InputActions m_Wrapper;
        public CastFishingRodActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Casting => m_Wrapper.m_CastFishingRod_Casting;
        public InputActionMap Get() { return m_Wrapper.m_CastFishingRod; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CastFishingRodActions set) { return set.Get(); }
        public void AddCallbacks(ICastFishingRodActions instance)
        {
            if (instance == null || m_Wrapper.m_CastFishingRodActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CastFishingRodActionsCallbackInterfaces.Add(instance);
            @Casting.started += instance.OnCasting;
            @Casting.performed += instance.OnCasting;
            @Casting.canceled += instance.OnCasting;
        }

        private void UnregisterCallbacks(ICastFishingRodActions instance)
        {
            @Casting.started -= instance.OnCasting;
            @Casting.performed -= instance.OnCasting;
            @Casting.canceled -= instance.OnCasting;
        }

        public void RemoveCallbacks(ICastFishingRodActions instance)
        {
            if (m_Wrapper.m_CastFishingRodActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICastFishingRodActions instance)
        {
            foreach (var item in m_Wrapper.m_CastFishingRodActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CastFishingRodActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CastFishingRodActions @CastFishingRod => new CastFishingRodActions(this);

    // Fishing
    private readonly InputActionMap m_Fishing;
    private List<IFishingActions> m_FishingActionsCallbackInterfaces = new List<IFishingActions>();
    private readonly InputAction m_Fishing_Pull;
    public struct FishingActions
    {
        private @InputActions m_Wrapper;
        public FishingActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pull => m_Wrapper.m_Fishing_Pull;
        public InputActionMap Get() { return m_Wrapper.m_Fishing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishingActions set) { return set.Get(); }
        public void AddCallbacks(IFishingActions instance)
        {
            if (instance == null || m_Wrapper.m_FishingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FishingActionsCallbackInterfaces.Add(instance);
            @Pull.started += instance.OnPull;
            @Pull.performed += instance.OnPull;
            @Pull.canceled += instance.OnPull;
        }

        private void UnregisterCallbacks(IFishingActions instance)
        {
            @Pull.started -= instance.OnPull;
            @Pull.performed -= instance.OnPull;
            @Pull.canceled -= instance.OnPull;
        }

        public void RemoveCallbacks(IFishingActions instance)
        {
            if (m_Wrapper.m_FishingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFishingActions instance)
        {
            foreach (var item in m_Wrapper.m_FishingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FishingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FishingActions @Fishing => new FishingActions(this);
    private int m_GlobalSchemeIndex = -1;
    public InputControlScheme GlobalScheme
    {
        get
        {
            if (m_GlobalSchemeIndex == -1) m_GlobalSchemeIndex = asset.FindControlSchemeIndex("Global");
            return asset.controlSchemes[m_GlobalSchemeIndex];
        }
    }
    public interface ICastFishingRodActions
    {
        void OnCasting(InputAction.CallbackContext context);
    }
    public interface IFishingActions
    {
        void OnPull(InputAction.CallbackContext context);
    }
}
